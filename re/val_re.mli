(***********************************************************************)
(*                                                                     *)
(*                  XML Schema Validator Generator                     *)
(*                                                                     *)
(*           Manuel Maarek (SafeRiver)                                 *)
(*                                                                     *)
(*  Copyright 2012, ANSSI and SafeRiver.                               *)
(*                                                                     *)
(***********************************************************************)

(* $Id: val_re.mli 1692 2012-05-31 09:47:17Z maarek $ *)

(** {1 XSD built-in datatypes}

    Functions testing if a string data is of a given XSD built-in
    datatype. The functions implement the regular expressions
    corresponding to the XSD datatype.

    The implementation of this module contains OCaml regular
    expressions. These expressions are generated fomr the XSD regular
    expressions contained in the file [meta/meta_val_re.ml]. The
    implementation of this module is generated by the command [make -f
    meta.mk re/val_re.ml].  *)


(** Test if a given string data is a lexically valid XSD primitive
    type {b string} *)
val test_st_string : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b boolean} *)
val test_st_boolean : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b decimal} *)
val test_st_decimal : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b float} *)
val test_st_float : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b double} *)
val test_st_double : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b duration} *)
val test_st_duration : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b dateTime} *)
val test_st_dateTime : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b time} *)
val test_st_time : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b date} *)
val test_st_date : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b gYearMonth} *)
val test_st_gYearMonth : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b gYear} *)
val test_st_gYear : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b gMonthDay} *)
val test_st_gMonthDay : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b gDay} *)
val test_st_gDay : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b gMonth} *)
val test_st_gMonth : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b hexBinary} *)
val test_st_hexBinary : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b base64Binary} *)
val test_st_base64Binary : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD primitive
    type {b anyURI} *)
val test_st_anyURI : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD non primitive
    type {b NMTOKEN} *)
val test_st_NMTOKEN : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD non primitive
    type {b Name} *)
val test_st_Name : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD non primitive
    type {b NCName} *)
val test_st_NCName : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD non primitive
    type {b integer} *)
val test_st_integer : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD non primitive
    type {b yearMonthDuration} *)
val test_st_yearMonthDuration : Stringdata.t -> bool

(** Test if a given string data is a lexically valid XSD non primitive
    type {b dayTimeDuration} *)
val test_st_dayTimeDuration : Stringdata.t -> bool

(** Test if a given string data is an explicit timestamp *)
val test_st_explicit_timestamp : Stringdata.t -> bool
