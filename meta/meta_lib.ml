(***********************************************************************)
(*                                                                     *)
(*                  XML Schema Validator Generator                     *)
(*                                                                     *)
(*           Manuel Maarek (SafeRiver)                                 *)
(*                                                                     *)
(*  Copyright 2012, ANSSI and SafeRiver.                               *)
(*                                                                     *)
(***********************************************************************)

(* $Id: meta_lib.ml 1502 2012-05-02 10:34:30Z maarek $ *)

(** {1 Meta functions for generating regular expressions corresponding to XML charsets} *)

let xsd_one_re_of_range range =
  Xsd.RE_regexp
    [Xsd.RE_branch
       [Xsd.RE_piece
          ((Xsd.RE_atom range),None) ] ]

let xsd_re_of_range range =
  Xsd.RE_regexp
    [Xsd.RE_branch
       [Xsd.RE_piece
          ((Xsd.RE_atom range),
           Some Xsd.RE_none_or_more) ] ]

let f = stdout

let print_next_charset s re =
  let Lxsd.RegExp re_s = Xsd_lib.regexp_of_regexp re in
  Printf.fprintf f "%s%s%s" "let next_" s " =\n";
  Printf.fprintf f "%s%s%s"
    "  Stringdata.match_regexp_from (Stringdata.of_string \""
    (Stringdata.to_code_escaped_string re_s)
    "\")\n\n";
  flush f

let print_test_charset s re =
  let Lxsd.RegExp re_s = Xsd_lib.regexp_of_regexp re in
  Printf.fprintf f "%s%s%s" "let test_" s " =\n";
  Printf.fprintf f "%s%s%s"
    "  Stringdata.match_regexp (Stringdata.of_string \""
    (Stringdata.to_code_escaped_string re_s)
    "\")\n\n";
  flush f


let print_header name =
  Printf.fprintf f "%s%s%s\n"
    "(* file automatically generated by the command make -f meta.mk re/" name ".ml *)";
